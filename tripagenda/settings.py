"""
Django settings for tripagenda project.

Generated by 'django-admin startproject' using Django 4.2.7.
"""
import io
import os
from logging.config import dictConfig
from pathlib import Path

import environ
import google.auth
from google.cloud import secretmanager

from tripagenda.logging import log_config

dictConfig(log_config)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
env_file = os.path.join(BASE_DIR, ".env")
ENVIRONMENT = os.environ.get("ENVIRONMENT", "local")

# Google Cloud Platform
# Attempt to load the Project ID into the environment, safely failing on error.
if ENVIRONMENT == "production":
    try:
        _, os.environ["GOOGLE_CLOUD_PROJECT"] = google.auth.default()
    except google.auth.exceptions.DefaultCredentialsError:
        pass

if os.path.isfile(env_file):
    # Use a local secret file, if provided
    env.read_env(env_file)
elif os.environ.get("GOOGLE_CLOUD_PROJECT", None):
    # Pull secrets from Secret Manager
    project_id = os.environ.get("GOOGLE_CLOUD_PROJECT")

    client = secretmanager.SecretManagerServiceClient()
    settings_name = os.environ.get("SETTINGS_NAME", "django_settings")
    name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")

    env.read_env(io.StringIO(payload))
else:
    raise Exception("No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found.")

# Application configs
APP_NAME = "tripagenda"
APP_VERSION = "0.1.0"
API_PREFIX = "/api"
API_INTERNAL_PREFIX = "/internal"
API_VERSION = "v1"

# OpenAI configs
OPENAI_API_KEY = os.environ.get(
    "OPENAI_API_KEY", ""
)  # TODO: fetch from secrets manager
OPENAI_MODEL = os.environ.get("OPENAI_MODEL", "gpt-3.5-turbo")

SECRET_KEY = env("SECRET_KEY")

DEBUG = env("DEBUG")
if not DEBUG:
    DEBUG = False

ALLOWED_HOSTS = (
    ["*"]
    if ENVIRONMENT == "local"
    else [
        "https://travelagenda-fe.web.app",
        "https://www.travelagenda-fe.web.app",
        "https://tripagenda.co",
        "https://www.tripagenda.co",
        "https://travelmate-next-shadcnui.vercel.app",
    ]
)

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

INSTALLED_APPS = ["api"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
]

ASGI_APPLICATION = "tripagenda.asgi.app"

if os.environ.get("IN_DOCKER"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": "api",
            "USER": "api",
            "PASSWORD": "api",
            "HOST": "postgres",
            "PORT": 5432,
            "CONN_MAX_AGE": 60 * 60,
        }
    }

    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": os.getenv("REDIS_URL", "redis://redis/1"),
            "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        }
    }

    SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
    SESSION_CACHE_ALIAS = "default"
    SESSION_COOKIE_AGE = 365 * 24 * 60 * 60
    SESSION_COOKIE_SECURE = True
elif os.environ.get("GOOGLE_CLOUD_PROJECT", None):
    DATABASES = {"default": env.db()}
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# If the flag as been set, configure to use proxy
if os.environ.get("USE_CLOUD_SQL_AUTH_PROXY", None):
    DATABASES["default"]["HOST"] = "127.0.0.1"
    DATABASES["default"]["PORT"] = 5432

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

TEST_RUNNER = "xmlrunner.extra.djangotestrunner.XMLTestRunner"

TEST_OUTPUT_FILE_NAME = "report.xml"
